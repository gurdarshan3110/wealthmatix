<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use App\Models\Agency;
use App\Models\AgencyUser;
use App\Models\User;
use DataTables;

class AgencyController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    const TITLE = 'Agencies';

    public function index()
    {
        $title = self::TITLE;
        return view('agency.index', compact('title'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $title = 'Add New Agency';
        return view('agency.create', compact('title'));
    }

    public function registration()
    {
        if(Auth::user()){
            return redirect()->intended('dashboard');
        }
        return view('auth.registration');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $input = $request->all();
        $validatedData = $request->validate([
            'name' => 'required',
            'email' => 'required|email|unique:users',
            'phone_no' => ['required', 'regex:/^(\+\d{1,3}[- ]?)?\d{10,}$/', 'unique:agencies'],
            'status' => 'required'
        ]);

        $autoGeneratedPassword = '12345678';
        $agencyCode = $this->generateRandomString($request->name);
        $input['agency_code'] = $agencyCode;
        $agency = Agency::create($input);
        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'username' => $request->email,
            'phone_no' => $request->phone_no,
            'password' => Hash::make($autoGeneratedPassword),
            'user_type' => User::USER_AGENCY,
        ]);
        $user->agencies()->attach($agency);

        return redirect()->route('agencies.index', $agency->id)->with('success', 'Agency created successfully.');
    }

    public function customRegistration(Request $request)
    {
        $input = $request->all();
        $validatedData = $request->validate([
            'name' => 'required',
            'email' => 'required|email|unique:users',
            'phone_no' => ['required', 'regex:/^(\+\d{1,3}[- ]?)?\d{10,}$/', 'unique:agencies'],
        ]);

        $autoGeneratedPassword = '12345678';
        $agencyCode = $this->generateRandomString($request->name);
        $input['agency_code'] = $agencyCode;
        $input['status'] = 0;
        $agency = Agency::create($input);
        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'username' => $request->email,
            'phone_no' => $request->phone_no,
            'password' => Hash::make($autoGeneratedPassword),
            'user_type' => User::USER_AGENCY,
        ]);
        $user->agencies()->attach($agency);

        return redirect()->route('auth.registration', $agency->id)->with('success', 'Agency created successfully.');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $title = 'View Agency Details';
        $agency = Agency::find($id);

        return view('agency.show', compact('agency', 'title'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit(Agency $agency)
    {
        $title = 'Edit Agency';

        return view('agency.edit', compact('agency', 'title'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */

    public function update(Request $request, Agency $agency)
    {
        $input = $request->all();
        $user = User::where('email', $agency->email)->first();
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,id,'.$user->id,
            'phone_no' => [
                'required',
                'regex:/^(\+\d{1,3}[- ]?)?\d{10,}$/',
                'unique:agencies,phone_no,'.$agency->id.',id'
            ],
            'status' => 'required',
        ]);
        $agency->update($input);
        $user->update(['name' => $request->name,'email' => $request->email]);

        return redirect()->route('agencies.index')
                         ->with('success', 'Agency updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Agency $agency)
    {
        $agency->delete();

        return redirect()->route('agencies.index')
                         ->with('success', 'Agency deleted successfully.');
    }

    public function list()
    {
        $data = Agency::get();

        return DataTables::of($data)


            ->addColumn('name', function ($row) {
                $name = $row->name;

                return $name;
            })

            ->addColumn('email', function ($row) {
                $email = $row->email;

                return $email;
            })

            ->addColumn('phone_no', function ($row) {
                $phone_no = $row->phone_no;

                return $phone_no;
            })

            ->addColumn('gst_no', function ($row) {
                $gst_no = $row->gst_no;

                return $gst_no;
            })

            ->addColumn('status', function ($row) {
                $status = (($row->status == 1) ? 'Active' : 'Inactive');

                return $status;
            })
            ->addColumn('action', function ($row) {
                $msg = 'Are you sure?';
                $action = '<form action="'.route('agencies.destroy', [$row]).'" method="post">
                    '.csrf_field().'
                    '.method_field('DELETE').'
                    <div class="btn-group">
                    <a href="'.route('agencies.edit', [$row]).'"
                       class="btn btn-warning btn-xs">
                        <i class="far fa-edit"></i>
                    </a>
                    <button type="submit" class="btn btn-danger btn-xs" onclick="return confirm(\''.$msg.'\')"><i class="far fa-trash-alt"></i></button>
                    
                </div>
                </form>';

                return $action;
            })
        ->rawColumns(['action'])
        ->make(true);
    }

    function generateRandomString($name) {
        // Convert name to uppercase
        $name = strtoupper($name);
        
        // Get the first three letters from the name
        $letters = substr($name, 0, 3);
        
        // Generate three random numbers
        $numbers = mt_rand(100, 999);
        
        // Combine letters and numbers
        $randomString = $letters . $numbers;
        
        return $randomString;
    }

}
